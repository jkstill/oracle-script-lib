select rownum id, column_value comments 
from (
	table(
		sys.odcivarchar2list(
q'[ This table is commonly used to find the object and the file# and block# of its header when there's high cache buffers chains latch contention: select obj, dbarfil, dbablk from x$bh a, v$latch_children b where a.hladdr = b.addr for the said latch (whose sleeps you think are too high). You can also use this table to see if a specific buffer has too many clones: select dbarfil, dbablk, count(*) from x$bh group by dbarfil, dbablk having count(*) > 2. Note obj column matches dba_objects.data_object_id, not object_id. For performance reason, don't merge dba_extents with the query of x$bh that has a group by, unless you use in-line view and `no_merge` hint (see J. Lewis [Practical Oracle8i](http://www.jlcomp.demon.co.uk/ind_book.html), p.215) The tch column, touch count, records how many times a particular buffer has been accessed. Its flag column is explained by [J. Lewis](http://www.jlcomp.demon.co.uk/buf_flag.html) (some unused columns are later used; e.g. bit 29 means plugged_from_foreign_db in 12c); explanation of state, mode and indx can be found in [Anjo Kolk's paper](http://www.akadia.com/download/documents/session_wait_events.pdf). Tim is time the buffer touch happened ([Note 1](#time)). Lru_flag is about the buffer's position on LRU lists ([Ref](http://www.ixora.com.au/scripts/sql/blocks_on_hot_latches.sql) and [136312.1](https://support.oracle.com/epmos/faces/DocumentDisplay?id=136312.1)); 2 moved_to_tail, 4 on_auxiliary_list (auxliary LRU), 8 hot_buffer (on hot end of main LRU), and numbers can be added e.g. 6=2+4.]',
q'[ Lists the buffers on the checkpoint queue. Immediately after a full checkpoint, the buffers with non-zero buf_ptr and buf_dbablk should go down.]',
q'[ One use is to find old `alert.log` text long after you recycled the physical file: select originating_timestamp, message_text from interesting and are not available in `alert.log`.]',
q'[ 12*c*]',
q'[ code?|f?|key|problem ? You can quickly summarize what kind of errors the database has had: select error_facility||'-'||error_number, count(*) from x$dbgricx group by error_facility||'-'||error_number order by 2, and optionally restrict to a certain time range. You can summarize on a more granular level, such as shared pool vs large pool on error_arg2 in case of ORA-4031, and find records of these errors in v$diag_incident or (undocumented) v$diag_diagv_incident. In any case, you may find this easier than `grep` alert.log. For each incident, its session info is in]',
q'[ Base table of undocumented v$diag_critical_error but includes facility dbge (Diagnostic Data Extractor or dde)]',
q'[ Rules for flood control on too many fatal errors.]',
q'[ Base table of dba_logstdby_parameters but includes invisible parameters.]',
q'[ Base table of v$diag_alert_ext. Same as x$dbgalertext but has more lines, slower to query]',
q'[ Base table of undocumented v$diag_(v)hm_run. Health monitor job records. Maybe complementary to v$hm_run?]',
q'[ Base table of v$diag_ips_configuration. Some ADR IPS related config info. Like a few other v$diag* (or x$diag*) tables, some columns such as adr_home, name, can't be exactly matched as if there're trailing characters. CTAS to create a regular table against which you query, or use subquery factoring with /*+materialize*/ hint.]',
q'[ Some metadata related to dNFS, SGA memory, message timeout, ping timeout, etc.]',
q'[ DRA failure names and descriptions.]',
q'[ History of RAC DRM and stats. Parent_key is object_id. If an object is remastered to another node (new_master) too frequently, consider partitioning the app sessions. In 12.1.0.2, there's also]',
q'[ 12*c*R2 RAC. Interconnect interface protocol (e.g. ethernet), names, MAC. No IP addresses, which are in v$cluster_interconnects and v$configured_interconnects, x$ksipcip_kggpnp and x$ksipcip.]',
q'[ Internal job queue. Job_oid is object_id in dba_objects. If you must query this table, exit the session as soon as you're done with your work because your session after the query holds an exclusive JS lock, which will block CJQ process! Rollback or commit won't release the lock.]',
q'[ See [Note:104420.1](https://supporthtml.oracle.com/ep/faces/secure/km/DocumentDisplay.jspx?id=104420.1). Find sessions coming from or going to a remote database; in short, v$transaction.addr. select /*+ ordered */ substr(s.ksusemnm,1,10)||'-'|| substr(s.ksusepid,1,10) origin, substr(g.k2gtitid_ora,1,35) gtxid, substr(s.indx,1,4)||'.'|| substr(s.ksuseser,1,5) lsession, s.ksuudlna username, substr(decode(bitand(ksuseidl,11), 1,'ACTIVE', 0, decode( bitand(ksuseflg,4096) , 0,'INACTIVE','CACHED'), 2,'SNIPED', 3,'SNIPED', 'KILLED'),1,1) status, e.kslednam waiting from x$k2gte g, x$ktcxb t, g.k2gtdses=t.ktcxbses and s.addr=g.k2gtdses and e.indx=s.ksuseopc; It's better than checking for DX locks for outgoing sessions (since a DX lock only shows up in v$lock for the current distributed transaction session). X$k2gte2 is the same as x$k2gte except on k2gtetyp which may show 2 for 'TIGHTLY COUPLED' instead of 0 for 'FREE'. One use of k2gtitid_ora as opposed to the hex numbers in v$global_transaction.globalid.]',
q'[ 12*c*. RMAN related]',
q'[ Check incremental checkpoints ([259586.1](https://support.oracle.com/epmos/faces/DocumentDisplay?id=259586.1))]',
q'[ [Jonathan Lewis](http://www.jlcomp.demon.co.uk/buffer_handles.html) ("_db_handles")]',
q'[ A commonly used query breaks down the contents of v$waitstat into per-datafile statistics: select name, count, time from v$datafile df,]',
q'[ [Tanel Poder](http://www.freelists.org/archives/oracle-l/08-2004/msg00995.html)]',
q'[ each row for the write list of one DBWR]',
q'[  ]',
q'[ 10*g* and up. [Tanel Poder](http://www.freelists.org/post/oracle-l/different-physical-access-method-because-of-disabling-Automated-Memory-Management,6)]',
q'[ See above]',
q'[ 12*c*. Column value is actual buffer cache usage in db_block_size, the same (except for unit) as buffer_cache_bytes of v$rsrc_pdb or bc_size_kgskmeminfo of x$kgskmeminfo. This table also gives lower (column minimum, bound by db_cache_size if defined) and upper (column maximum) limits.]',
q'[ why [Note:34405.1](https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=34405.1): select kcbwhdes, why0+why1+why2 "Gets", "OTHER_WAIT" from x$kcbsw s, works for 10*g* only; for newer versions, see x$kcbuwhy); [Ref1](http://www.jlcomp.demon.co.uk/buffer_usage.html) ("statistics about the way these [x$kcbwh] functions have been used")]',
q'[ For 11*g* and up, select kcbwhdes, why0+why1+why2 "Gets", "OTHER_WAIT" from x$kcbsw s, x$kcbwh w, x$kcbuwhy w2 where s.indx=w.indx and w.indx=w2.indx and s."OTHER_WAIT">0]',
q'[ See [183770.999](https://metalink.oracle.com/metalink/plsql/ml2_documents.showDocument?p_database_id=FOR&p_id=183770.999) for relationship to x$bh and x$kcbwds. Some people use this query to find how many blocks of a segment are in each buffer pool: select decode(pd.bp_id,1,'KEEP',2,'RECYCLE',3,'DEFAULT',4,'2K SUBCACHE',5,'4K SUBCACHE',6,'8K SUBCACHE',7,'16K SUBCACHE',8,'32K SUBCACHE','UNKNOWN') subcache, bh.object_name,bh.blocks from x$kcbwds ds, x$kcbwbpd pd, (select /*+ use_hash(x) */ set_ds, o.name object_name, count(*) BLOCKS from obj$ o, x$bh x where o.dataobj#=x.obj and x.state!=0 and o.owner#!=0 and o.name='*&mytable*' group by set_ds, o.name) bh where ds.set_id>=pd.bp_lo_sid and ds.set_id<=pd.bp_hi_sid and pd.bp_size!=0 and ds.addr=bh.set_ds]',
q'[ See above. Also see [Ref1](http://www.ixora.com.au/newsletter/2000_10.htm#cache), [Ref2](http://www.perfvision.com/papers/06_buffer_cache.ppt), [Ref3](http://www.oraclefans.cn/forum/showblog.jsp?rootid=6555). Total row count in this table is _db_block_lru_latches, although only db_writer_processes rows have real numbers. Full list and descriptions of the columns are in the note section of [Ref4](http://www.perfvision.com/papers/06_buffer_cache.ppt) (search for "Xuan Bui of Oracle France") or in [Ref5](http://my-oracle.it-blogs.com.ua/post-257.aspx).]',
q'[ See x$kcbsw for SQL. [Ref1](http://www.jlcomp.demon.co.uk/buffer_usage.html) ("different functions that may be used to perform different types of logical I/O"), [Ref2](http://web.archive.org/web/20071205154134/http://www.dizwell.com/prod/node/342)]',
q'[ In 10*g*R1, to find controlfile size as viewed at OS level but from inside Oracle, select cfnam, (cffsz+1)*cfbsz from x$kcccf. cfbsz is the controlfile log block size; should report the same as the command `dbfsize controlfile` (`$ORACLE_HOME/bin/dbfsize` is available on UNIX, regardless Oracle version.) In 10*g*R2, block size and file size are both in v$controlfile although [Reference manual](http://docs.oracle.com/cd/B19306_01/server.102/b14237/dynviews_1068.htm) misses them.]',
q'[ [S. Adams](http://www.ixora.com.au/scripts/redo_log.htm#log_file_usage) and [K Gopalakrishnan](http://www.jlcomp.demon.co.uk/faq/redologuse.html) use this view to find how much the current redo log is filled. [Eygle](http://www.eygle.com/archives/2006/01/why_oracle_heartbeat2.html) studied instance heartbeat, column cphbt.]',
q'[  ]',
q'[ lebsz may be used to show redo logfile block size, usually 512; should report the same as the command `dbfsize redologfile` (`$ORACLE_HOME/bin/dbfsize` is available on UNIX only)]',
q'[ controlfile restore point Base tables of v$restore_point, for non-guaranteed and guaranteed restore points. Retain records of them after they were dropped]',
q'[ Exadata smart scan related. Note that views for cell servers per se are]',
q'[ base table of v$cr_block_server or v$bsp, used to troubleshoot global cache cr requests]',
q'[  ]',
q'[  ]',
q'[ See [Ref1](https://books.google.com/books?id=F4aNiUWUq-4C&pg=PA69&q=X%24KCLFX), [Ref2](http://www.freelists.org/archives/oracle-l/11-2008/msg00059.html), [1492990.1](https://support.oracle.com/epmos/faces/DocumentDisplay?id=1492990.1). If lwm is too low, you may see 'gc freelist' wait.]',
q'[  ]',
q'[  ]',
q'[ Cur_scn is the same as v$database.current_scn. Cur_max_scn should be 16384*seconds since 1988 ([1376995.1](https://support.oracle.com/epmos/faces/DocumentDisplay?id=1376995.1)). This view may be related to the SCN headroom problem.]',
q'[ 19c. Base table of v$nologging_standby_txn. Nologging standby is a feature [new](https://docs.oracle.com/en/database/oracle/oracle-database/18/newft/new-features.html#GUID-EA49287B-D55F-44F4-A31D-A7AE231C9BB6) in 18c.]',
q'[ 10*g* and up. Info about redo strands. Non-zero pvt_strand_state_kcrfa_cln (and strand_num_ordinal_kcrfa_cln=3735928559 or DEADBEEF in hex) means a transaction is using this private strand. (Private strands may be disabled in RAC or if supplemental logging is on, but multistrand redo is still used.) Strand_size_kcrfa is the strand size (meaningful only if last_buf_kcrfa!='00'; [Ref](http://www.hellodba.com/Doc/Oracle_redo_strand_cn.html)). Also see [18164614](https://support.oracle.com/epmos/faces/ui/km/BugDisplay.jspx?id=18164614), [Ref](https://jonathanlewis.wordpress.com/2012/09/17/private-redo-2/).]',
q'[ "columns bfs (buffer size) and bsz (block size). Dividing bfs by bsz gives mxr (the maximum number of blocks to read size)" (from [Anjo Kolk's paper](http://www.akadia.com/download/documents/session_wait_events.pdf))]',
q'[ Related to LNS (redo transport) processes, NSSn (sync) and NSAn (async).]',
q'[ 12*c*R2. Set _column_level_stats to on to get the stats. Exposed to the undocumented v$column_statistics.]',
q'[ used in catalog.sql to create index_stats]',
q'[ Used in catalog.sql to create index_histogram]',
q'[ See [Note:555124.1](https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=555124.1)]',
q'[ Only populated in ASM instance. See [Note:351117.1](https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=351117.1) and Steve Shaw and Julian Dyke [*Pro Oracle Database 10g RAC on Linux*](http://www.amazon.com/gp/product/B001CSP9ZA/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B001CSP9ZA&linkCode=as2&tag=englstudforch-20&linkId=3NZEMF373WN3IOSM)![](http://ir-na.amazon-adsystem.com/e/ir?t=englstudforch-20&l=as2&o=1&a=B001CSP9ZA), pp.232-3. Column v_kfdat is 'V' for allocated and 'F' for free. For most ASM-related x$ tables, read [Luca Canali](https://twiki.cern.ch/twiki/bin/view/PSSGroup/ASM_Internals).]',
q'[ Only populated in ASM instance. You can check how many extents are allocated for each datafile on which disk, e.g. select a.name, d.path, d.group_number, d.disk_number, count(*) from v$asm_alias a, v$asm_disk d, v$asm_file f, x$kffxp x where a.group_number = x.group_kffxp and a.file_number = x.number_kffxp and d.group_number = x.group_kffxp and d.disk_number = x.disk_kffxp and f.group_number = a.group_number and f.file_number = a.file_number and f.type = 'DATAFILE' group by a.name, d.path, d.group_number, d.disk_number, f.bytes order by 1;]',
q'[ You can tell from inside ASM instance whether you're using ASMLib and its version.]',
q'[ Some columns are explained [here](http://www.ixora.com.au/scripts/sql/shared_pool_lru_stats.sql).]',
q'[ Base table for v$sql, v$sqlarea. Fixed view based on x$kglob according to x$kqfdt. One use of this table is to find partially parsed SQLs because they cause parse failures (viewable in v$sysstat or v$sesstat). Their kglobt02 (command type) is 0, kglobt09 (child number) is 65535 for the child, SQL text length is cut to 20 chars, kglobt17 and kglobt18 (parsing and user schema) are 0 or 2147483644 (for 32-bit Oracle) depending on if it's parent or child, and obviously miss heap 6 (cursor body). Find them by select kglnaobj, kglnatim, kglobts0, kglnahsh from restrict by kglnatim i.e. first_load_time).]',
q'[ Used in catblock.sql to build dba_kgllock. kgllkuse or kgllkses maps to v$session.saddr, kgllkpnc call pin, kgllkpns session pin, kgllkmod lock held (0: no lock; 1: null; 2: shared; 3: exclusive), kgllkflg (allegedly 8 for pre-10*g* or 2048 for 10*g* meaning SQL being run, [Ref](http://zhouwf0726.itpub.net/post/9689/243202); 256 for broken kgl lock in 10*g* or 1 in 9*i*, [Ref](http://www.freelists.org/post/oracle-l/How-to-determine-sessions-with-invalid-package-states,7)), kgllkspn savepoint. If you get library cache lock or pin wait, kgllkhdl matches v$session_wait.p1raw (handle address), and kglnaobj is the first 80 characters of the object name. [Note:122793.1](https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=122793.1) has this SQL for our convenience: select * from x$kgllk lock_a where kgllkreq = 0 and exists (select lock_b. kgllkhdl from x$kgllk lock_b where kgllkses = '&saddr_from_v$session' /* blocked session */ and lock_a.kgllkhdl = lock_b.kgllkhdl and kgllkreq > 0). X$kgllk.kglhdpar matches x$kglob.kglhdpar if there's a KGL lock on the object. Also see [LibraryCachePinLockHowToFindBlocker.txt](../oranotes/LibraryCachePinLockHowToFindBlocker.txt). If the blocker is in an instance other than that of the blocked session in a RAC database, use object name (kglnaobj and first half of v$session.p3raw) to find the blocker.]',
q'[ To find library cache object for wait events library cache pin or lock and pipe get or put, match kglhdadr with v$session.p1raw. Kglobt03 is sql_id. Kglhdflg is partially explained in [Note:311689.1](https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=311689.1) (for permanent keeping). Kglhddmk may be data object load mask; can be used to identify the number of the loaded heap, counted from 0 (see comment of 06/12/01 in [Bug:1164709](https://support.oracle.com/CSP/main/article?cmd=show&type=BUG&id=1164709)). Steve Adams' [objects_on_hot_latches.sql](http://www.ixora.com.au/scripts/sql/objects_on_hot_latches.sql) finds the way Oracle links a library cache object (based on kglnahsh) to a specific library cache child latch. X$kglob, and in case of cursors partially built therefore not visible in v$sql(XXX), v$open_cursor, v$object_dependency. Kglobhd[0-7] is heap descriptor address and kglobhs[0-7] is its size; can join to x$ksmhp.ksmchds to see heap components.]',
q'[ Used in catblock.sql to build dba_kgllock. Some columns are simiarly explained for x$kgllk. Newer versions of Oracle use mutex in place of pin and this table won't have an entry for it although x$kglob.kglhdpmd will still have a non-zero value.]',
q'[ kglnacnm (container name?) is PL/SQL program unit or anonymous block while kglnadnm (dependent name?) is the individual SQLs inside the PL/SQL unit. [Ref](http://www.ixora.com.au/q+a/0110/31164749.htm); this may be the way to differentiate between user recursive SQLs (code in PL/SQL, trigger, etc.) from system-generated recursive SQLs (data dictionary check etc.). (See also v$object_dependency, but that doesn't show relation between PL/SQL block and its contents.) In 11*g*, v$sql.program_id may be used to tie the constituent SQL to its containing PL/SQL stored object (not anonymous block).]',
q'[ Base table of v$librarycache. Unexposed column kglstidn can be used as namespace in dbms_shared_pool.purge. ([Ref](SharedPoolPurging.html))]',
q'[ Maps synonym translation from original (kgltrorg) to final (kgltrfnl) address, All 3 address columns map to x$kglob.kglhdadr. [Example](../oranotes/SynonymTranslationInCursor.html).]',
q'[ Base table of v$blocking_quiesce. If the blocking session is not in SYS_GROUP consumer group according to v$rsrc_session_info, v$blocking_quiesce ignores it. Workaround is to directly query [Bug 7832504](https://support.oracle.com/CSP/main/article?cmd=show&type=BUG&id=7832504))]',
q'[ Stats about messages sent and received on RAC instances (not about data buffers which would be in x$kclcrst i.e. v$cr_block_server a.k.a v$bsp). The kjxmname column is interesting as well as the stats.]',
q'[ Base tables of v$hang_info and v$hang_session_info so column names can be deciphered. Retain info after the hang.]',
q'[ New in 12.1.0.2. Cursor to session mapping, after v$open_cursor no longer has this info? KKSCSPHD: parent addr, KKSCSHDL: child addr]',
q'[ Base table of v$sga_dynamic_components, v$sga_current_resize_ops etc., probably used to be named x$ksmgst and x$ksmgsc in 9*i*.]',
q'[ Maybe another way of representing SGA and memory components resizing operations. Ts: time; startaddr and end: addresses before and after resizing; donor and receiver: x$kmgsct.grantype]',
q'[ Base table of v$mvrefresh. Stores MV refresh history info, such as session SID and serial#. Un-exposed columns reftype_knstmvr, groupstate_knstmvr and total_* are useful; see the query in [Note:258021.1](https://supporthtml.oracle.com/ep/faces/secure/km/DocumentDisplay.jspx?id=258021.1).]',
q'[ 19c. Column kpoxftcldrv shows client driver and library versions and character sets for the clients that recently logged onto the server. In case of RAC, this info is instance-specific.]',
q'[ Row cache cursor statistics, columns explained in "How can you tune it?" section of [Tuning the _row_cache_cursors Parameter](http://www.ixora.com.au/tips/tuning/row_cache_cursors.htm). Note this is PGA. Need to dump another process's PGA to view it.]',
q'[ One use is to find all fixed tables given a column name, e.g. select kqftanam, kqfconam, kqfcoidx from x$kqfco c, x$kqfta t where t.indx=c.kqfcotab and kqfconam='KGLHDADR', or like part of the column name. If kqfcoidx is 0, the column is not indexed.]',
q'[ Contains x$kglcursor, x$kgltable etc. which are based on x$kglob; effectively these are views of other x$ tables, but Oracle couldn't call them views because they already had x$kqfvi.]',
q'[ Used in catprc.sql to build disk_and_fixed_objects view. Each object has two rows, one package and one package body.]',
q'[ Oracle)  ]',
q'[ Base table of v$fixed_table, whose object_id (indx of x$kqfta) matches obj# of tab_stats$, the table dbms_stats.gather_fixed_objects_stats inserts stats into.]',
q'[  ]',
q'[ Base table of v$sql_optimizer_env. One use is to find all parameters including underscore ones in the environment of a SQL cursor by not restricting on column kqlfsqce_flags as v$sql_optimizer_env does.]',
q'[ Column kqrpdosz is size of this parent rowcache object, not exposed in v$rowcache_parent although shown in rowcache dump.]',
q'[ Column kqrsdosz is size of this subordinate rowcache object, not exposed in v$rowcache_subordinate although shown in rowcache dump.]',
q'[ Commonly used with dbms_backup_restore.searchfiles to read the file list of a directory at OS. [Ref](http://www.morganslibrary.org/hci/hci002.html)]',
q'[ bitmap block [Alex Gorbachev](http://www.pythian.com/documents/UKOUG06-10gBCT.ppt)]',
q'[ Value `dba_buffer_count_public*dba_entry_count_public*dba_entry_size` is the memory that is currently allocated to the change tracking buffers. (Ref: [2160776.1](https://support.oracle.com/epmos/faces/DocumentDisplay?id=2160776.1))]',
q'[ Base table of v$bgprocess. Column ksbddfile in 12*c* associates the process with a header file, which hints at the kernel layer. But you may wish to see the actual internal names for the processes, in [10.2.0.1](http://www.juliandyke.com/Internals/BackgroundProcesses.html) and [11.2.0.1](http://www.arontunzi.com/cms/index.php?option=com_content&view=article&id=61), which are more detailed and available in earlier versions as well.]',
q'[ Probably background process slaves.]',
q'[ Actions performed by certain background processes and their timeout values]',
q'[ 18c. In root container. Background process CPU wait time.]',
q'[ Base table of v$io_outlier (for all I/O's except for LGWR) and v$lgwrio_outlier (for LGWR I/O). Timestamp, not exposed, is seconds since epoch.]',
q'[ Base table of v$active_instances. The un-exposed ksimisum column is instance incarnation number, matching "Reconfiguration started ... new inc ..." in alert.log.]',
q'[ These two 12*c* tables don't exist although v$fixed_table has their names. They probably would contain stats for the new IPC0 background process. Also related to the new _ksipc* parameters.]',
q'[ 12*c* only. Not sure why it's called this name. Apparently it's about enqueue resources. The name column is a wondeful alternative brief description for each enqueue or lock, compared with v$lock_type.description: select a.type, a.description, b.name from v$lock_type a, x$ksi_reuse_stats b where a.type = b.resname order by 1]',
q'[ session Base tables for v$event_name, v$system_event, and v$session_event, respectively. Benefit of querying x$ksles: (1) When ksleswts (wait count) is 0, v$session_event won't have the row but x$ksles still has them with non-zero kslestim (time waited micro) or kslesmxt (max wait time in micro); (2) Since kslesmxt is in microsec, it could be non-zero even if v$session_event.max_wait is 0. x$kslei has benefit (2) over v$system_event. In 12*c*, the new column ksleddsp of x$ksled provides a better event name, such as "db single block read" for the perpetually confusing "db file sequential read": select kslednam, ksleddsp from]',
q'[ "Indx = event number...Basically map events to a small number of useful classes like I/O waits" ([Ref](http://oracleweb.ioug.org/portals/0/whitepapers/look-towaitornottowait.pdf))]',
q'[ Set _db_hot_block_tracking to true and track hot blocks in buffer cache. It's an alternative and probably better way than checking touch count. ([Ref](http://ksun-oracle.blogspot.com/2014/03/hot-block-identification.html))]',
q'[ "describes the 8 classes", "Specify which latch belongs to which class" with _latch_class_ ([Ref](http://www.ioug.org/techrepository_2/view_file.cfm?ViewFileID=3031))]',
q'[ Records a few latches "missing" from v$latch* views, such as "DGA (domain global area) heap latch".]',
q'[ Base table of v$latch_misses. But column ksllwlbl is not exposed in any view. It's said to record "the 'Why' meaning for some 'Where'" ([Ref](https://andreynikolaev.files.wordpress.com/2012/12/andrey_nikolaev_latch_internals_2012_for_ruoug.pdf)) or "Unit to guard" ([Ref](http://www.vmcd.org/2012/06/oracle-latch-internals/)).]',
q'[ posting [Bug:653299](https://support.oracle.com/CSP/main/article?cmd=show&type=BUG&id=653299) says it "tracks which function is posting smon". Ksllwnam column (the part before semicolon if it exists) can match v$latch_misses.location to identify the latch that uses this function. Column ksllwlbl is explained in the entry for x$ksllw.]',
q'[ 12*c*R2. Base table of undocumented v$event_outliers.]',
q'[ [Ref](http://www.juliandyke.com/Presentations/SGAInternals.ppt)]',
q'[ One of the base tables of v$sgastat. Shows sizes of fixed SGA, buffer cache, log buffer, shared I/O pool (for SecureFile LOBs), and in 12*c*, data transfer cache. Even though some of these can be dynamically resized in modern versions of Oracle, any component in shared memory not in some kind of pool (v$sgastat where pool is null) is left in this "fixed" SGA table.]',
q'[ detailing fixed SGA: select a.ksmfsnam, a.ksmfstyp, a.ksmfssiz, b.ksmmmval from x$ksmfsv a, x$ksmmem b where a.ksmfsadr = b.addr and a.ksmfsnam like... (Ref. p.82, [Oracle Internal Services](http://www.oreilly.com/catalog/orinternals/)). For a latch, get ksmfsnam by matching x$ksmfsv.ksmfadr with x$kslld.kslldadr. You can see SGA parameters in ksmfsnam column and get their values with oradebug dumpvar sga *varname* or all values with oradebug dumpsga. In 12.1.0.2, to find which database parameter (as in v$parameter and x$ksppi) roughly [maps](../oranotes/DbParam_CompTimeConst_Map.txt) to which SGA variable, read the "Dump of Compile-Time Constants" section "Namespace ksppar_const_ns" of the trace file (note indx is off by 1).]',
q'[ [S. Adams](http://orafaq.com/maillist/oracle-l/2000/08/01/0344.htm), "What it returns depends on which heap descriptor you join to it. It is effectively a function returning the contents of an arbitrary heap that takes the heap descriptor as its argument." You need to join this table to another one on heap descriptor ksmchds, such as in v$sql_shared_memory (joining to x$kglcursor), or to x$ksmsp (on column ksmchpar), or kglobhd[0-6] of x$kglob or x$kglcursor_child, and possibly need to use use_nl hint. [Example](http://www.sql.ru/forum/actualthread.aspx?bid=3&tid=572522), [example](http://files.e2sn.com/scripts/tpt_public_win.zip).]',
q'[ interesting to me though)]',
q'[ Refer to Metalink Notes [61623.1](https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=61623.1) and [43600.1](https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=43600.1) for details. Note that query on this table can only be done once; subsequent query returns no rows unless large chunk shared pool allocations happened in the interim.]',
q'[  ]',
q'[ Entire SGA memory map. Each row shows memory content for 8 bytes (on 64-bit Oracle). Due to memory guard pages, you can only select from by joining to another table on addr column; otherwise the session may hang or throws ORA-3113 (Windows doesn't seem to have this problem). One usage is to find the value for an SGA variable, e.g. select ksmmmval from x$ksmfsv a, x$ksmmem b where a.ksmfsadr=b.addr and ksmfsnam='kzaflg_' to see if audit is enabled (what kzaflg_ means), which is equivalent to oradebug peek command, or for this particular purpose, even more simply, oradebug dumpvar sga kzaflg_.   Indx is SGA index, i.e. the difference of SGA address and sgabeg (which is x$ksmmem.addr where indx = 0) divided by architecture word size (4 for 32-bit, 8 for 64-bit machines). E.g., the value stored at address 0000000060001F40 on a 64-bit machine whose sgabeg is 0x60000000 can be calculated as:   select (to_number('0000000060001F40','xxxxxxxx') - to_number('60000000','xxxxxxxx')) /8 from dual;   select ksmmmval from x$ksmmem where indx = 1000;]',
q'[  ]',
q'[ Base table of v$process_memory_detail, populated by alter session set events 'immediate trace name pga_detail_get level *pid* and cleaned by ...pga_detail_cancel....]',
q'[ PGA heap (variable area). PGA subheaps: select /*+use_nl(h,p)*/ h.ksmchds,p.ksmchcom, h.ksmchcom ksmchnam,h.ksmchsiz, h.ksmchcls,h.ksmchpar from x$ksmhp h,x$ksmpp p where h.ksmchds = p.ksmchpar and p.ksmchcls like '%recr' and p.ksmchpar != hextoraw('00');]',
q'[ 12*c*R2. Shows the beginning and ending addresses and sizes of fixed and variable areas of SGA.]',
q'[ The 3rd argument of ORA-4031 tells you which section of shared (or java or large) pool is short of memory. It matches x$ksmsp.ksmchcom (or v$sgastat.name). SGA heaps: select /*+use_nl(h,s)*/ sess.sid, sess.username, h.ksmchds, h.ksmchcom ksmchnam, h.ksmchsiz, h.ksmchcls,h.ksmchpar from x$ksmhp h,x$ksmsp s,v$session sess where h.ksmchds = s.ksmchpar and s.ksmchcls like '%recr' and s.ksmchpar != hextoraw('00') and h.ksmchown = sess.saddr; SGA subheaps: select /*+use_nl(h,s)*/ h.ksmchds,s.ksmchcom,h.ksmchcom ksmchnam, h.ksmchsiz,h.ksmchcls,h.ksmchpar from x$ksmhp h,x$ksmsp s where h.ksmchds = s.ksmchpar and s.ksmchcls like '%recr'and s.ksmchpar != hextoraw('00'); You can sort on ksmchptr to get a map of memory pieces. In ksmchcom, the hex number after SQLA^ is the SQL hash value.]',
q'[  ]',
q'[ One row summarizes subpools and [durations](https://support.oracle.com/CSP/main/article?cmd=show&type=BUG&id=14311437). Dscnt_kghdsnew is subpool count (distinct dsidx_ksmnwex in]',
q'[ A new efficient fixed table shows subpools and [durations](https://support.oracle.com/CSP/main/article?cmd=show&type=BUG&id=14311437). See [396940.1](https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=396940.1).]',
q'[ The 3rd argument of ORA-4031 tells you which section of shared (or java or large) pool is short of memory. It matches x$ksmss.ksmssnam (or v$sgastat.name).]',
q'[  ]',
q'[ This 12*c* table shows how OS level shared memory segments are used (which segment is used by what component of SGA), in effect matching the rows of `ipcs -m' with those of v$sga. It also tells you whether and which segments are using HugePages, so you don't have to check /proc/*pid*/smaps to see that and is of course more detailed than just seeing the brief message in alert.log. See [more](HugePagesQuickTips.html).]',
q'[ UGA heap (variable area). UGA subheaps: select /*+use_nl(h,s)*/ h.ksmchds,u.ksmchcom,h.ksmchcom ksmchnam,h.ksmchsiz,h.ksmchcls,h.ksmchpar from x$ksmhp h,x$ksmup u where h.ksmchds = u.ksmchpar and u.ksmchcls like '%recr' and u.ksmchpar != hextoraw('00');]',
q'[ Base table of v$segstat and v$segment_statistics. Fts_stmp records the last time fts_staval was updated, fts_preval the previously recorded value. Fts_inte greater than 0 reveals some less known types of statistics. Note that value in v$segstat or v$segment_statistics is cumulative; e.g., if "row lock waits" is non-zero, the waits may not be happening right now.]',
q'[ Base table of v$parameter and v$parameter2. See comments on x$ksppi.]',
q'[ Base table of v$parameter, v$system_parameter and v$system_parameter2. Often used to see undocumented parameters: select a.ksppinm Parameter, a.ksppdesc Description, b.ksppstvl "Session Value", c.ksppstvl "Instance Value" from x$ksppi a, x$ksppcv b, x$ksppsv c where a.indx = b.indx and a.indx = c.indx and a.ksppinm like '_%' escape '' order by 1. You can also see if a specific parameter, underscore or not, is dynamically changeable etc.: select ksppinm name, ksppity "TYPE", ksppstvl value, ksppstdvl display_value, ksppstdf isdefault, decode(bitand(ksppiflg/256,1),1,'TRUE','FALSE') isses_modifiable, decode(bitand(ksppiflg/65536,3),1,'IMMEDIATE',2,'DEFERRED', 3,'IMMEDIATE','FALSE') issys_modifiable, decode(bitand(ksppiflg,4),4,'FALSE', decode(bitand(ksppiflg/65536,3), 0, 'FALSE', 'TRUE')) isinstance_modifiable , decode(bitand(ksppstvf,7),1,'MODIFIED',4,'SYSTEM_MOD','FALSE') ismodified, decode(bitand(ksppstvf,2),2,'TRUE','FALSE') isadjusted, decode(bitand(ksppilrmflg/64, 1), 1, 'TRUE', 'FALSE') isdeprecated, decode(bitand(ksppilrmflg/268435456, 1), 1, 'TRUE', 'FALSE') isbasic, ksppdesc description, ksppstcmnt update_comment from x$ksppi x, has 30 bits in 11*g* and 32 bits in 12*c*R2, most of which are unexposed. But for a static parameter, whether it's [instance-modifiable](../oranotes/StaticInstanceNonmodifiableParameters.txt) is not one of them. It would be very useful to have this bit.]',
q'[ Base table of v$system_parameter and v$system_parameter2. See comments on x$ksppi.]',
q'[ 12*c*R2. Base table of undocumented v$system_reset_parameter and v$system_reset_parameter2. Shows the value of a parameter if you run `alter system reset` to clear it from spfile. Also see comments on]',
q'[ Column kspspfhmodtime stores the time when you made the last change to the spfile. Use [Note 1](#time) to convert it to time but set epoch to 19870630. I don't know what's special about that time.]',
q'[ description Base tables of the undocumented v$channel_waits, which is used to find the big contributors to "reliable message" wait event. You can find the last message publishing time by select a.name_ksrcdes, b.totpub_ksrcctx, b.waitcount_ksrcctx, b.waittime_ksrcctx, new_time(to_date(to_char(lastpub_ksrcctx/86400+to_date('19700101','yyyymmdd'),'yyyymmdd hh24:mi:ss'),'yyyymmdd hh24:mi:ss'), 'GMT', 'CDT') from x$ksrcdes a, Column id_ksrcdes of x$ksrcdes provides alternative keywords you can use to search for.]',
q'[ Column ctxp_ksrchdl matches p1 of 'reliable message' (context) and owner_ksrchdl matches ksspaown of x$ksuse (base table of v$session). Last message time is lastmsg_ksrchdl seconds since epoch ([Note 1](#time)).]',
q'[ Base table of v$execution, a table documented poorly and probably wrong for a long time. The [definition](http://oracledba.ru/fv11gr2/gv$execution.html) in v$fixed_view_definition probably should restrict on id instead of op (where id=10), official [documentation](http://docs.oracle.com/database/121/REFRN/refrn30080.htm) should call FUNCTION function, PID pid (as v$process.pid), and the view should expose sid as session ID. This table together with x$trace provides info about KST trace. Unfortunately it seems to have stopped working in 11*g* and up.]',
q'[ 19c. Some TCP parameter settings and statistics.]',
q'[ Base table of v$session_longops. Column ksulotgt, probably for total gets?, is not exposed.]',
q'[ Base table of v$nls_valid_values.]',
q'[ ([Ref](https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=403995.1)). [v$detached_session](https://support.oracle.com/epmos/faces/DocumentDisplay?id=387077.1) showing sessions killed (without immediate option) but not cleaned.]',
q'[ the current usage. Not sure what resource (or kernel profile) exactly. ([Ref](http://oracledoug.com/serendipity/index.php?/search/redo/P6.html))]',
q'[ Base table of v$latchholder. Unexposed columns are ksuprllv (level), ksuprlty (type), ksuprlmd (mode), ksulawhy (why or reason), and ksulawhr (where or location).]',
q'[ Base table of v$session. To_char(ksuseflg,'xxxxxxxx') can be checked against session state object [flag](http://www.askmaclean.com/archives/tag/dump). In fact, this applies to all tables with this column, i.e. x$ksuse, x$ksusesta, are x1 (user session), x2 (recursive session), x4 (audit logon/logoff by cleanup), x40 (user session logs on), x10 (user session created by system processes), x8000000 (called NLS alter session). You can e.g. use it to [find](http://tech.e2sn.com/oracle/oracle-internals-and-architecture/recursive-sessions-and-ora-00018-maximum-number-of-sessions-exceeded) hidden recursive sessions.]',
q'[ In 11*g*, check client version with     with x as (select distinct to_char(ksuseclvsn,'xxxxxxx') v      from x$ksusecon where ksusenum = &sid)     select decode(v, '       0', 'no version provided: 10g or lower, or background process?',      to_number(substr(v,1,2),'xx') || '.' || --maj_rel      to_number(substr(v,3,1),'x') || '.' || --mnt_rel      to_number(substr(v,4,2),'xx') || '.' || --ias_rel      to_number(substr(v,6,1),'x') || '.' || --pat_set      to_number(substr(v,7,2),'xx')) client_version -- port_mnt     from x; ([Ref](http://www.freelists.org/post/oracle-l/SQLPlus-version-tracking,9))   Not needed in 12*c* because v$session_connect_info.client_version works fine.]',
q'[ Base table of undocumented v$tsm_sessions and v$sscr_sessions. Related to migratable sessions, sessions with OCI_MIGRATE set during creation.]',
q'[ In 10*g* and up, base table providing physical_memory_bytes to v$osstat (and VM paging stats on Windows). But on Linux up to Oracle 10.2.0.3, this number is system free memory in kilobytes (`grep MemFree /proc/meminfo`); on other OSes or 10.2.0.4 or up on Linux, it is "Total number of bytes of physical memory".]',
q'[ Base table of v$services and a few other service-related views. v$services may need x$kswsastab.kswsastabpflg=0 restriction; otherwise stopped services linger in the view till instance bounce.]',
q'[ Shows datafile - node (host) affinity. To test, make sure _affinity_on is true (default), set _enable_default_affinity to a number and bounce instance. Ksxafnum is file# in v$datafile or v$tempfile plus db_files. Not sure how to test though. Probably limited use with modern storage technology.]',
q'[ Base table of undocumented v$object_dml_frequencies. Set _dml_frequency_tracking to true to see data.]',
q'[ 12*c*R2. Base table of undocumented v$dml_stats. Counts recent DML operations independent of commit or rollback. Controlled by _dml_monitoring_enabled. Lastused is seconds from epoch ([Note 1](#time)).]',
q'[ On RAC, shows IPC client stats, cache for global cache (cache fusion traffic), dlm for distributed lock manager (GCS+GES), etc. Source for [dba_hist_ic_client_stats](http://docs.oracle.com/database/121/REFRN/refrn23721.htm). ([Ref](https://books.google.com/books?id=5bp5AAAAQBAJ&pg=PA361))]',
q'[ On RAC, lists all network interfaces and their stats. The same info as given by `ifconfig' or `ip -s link' except for hardware addresses. But one nice feature of this table is that the stats for virtual interfaces (e.g. eth*X*:*X* actually used by Oracle RAC) are separated out of those of their physical ones.]',
q'[ For RAC. Base table of 12*c* v$instance_ping. Can be used before 12*c*.]',
q'[ On RAC, IPC stats for each server process. Same info as in the `oradebug ipc' trace but less detailed (to compare, set pid to a specific process before dump). It shows summary stats for the five queues, IPC regions, bids prepared, etc.]',
q'[ all related to database change notification]',
q'[ Base table of v$transaction. Four bits of ktcxbflg column, exposed as v$transaction.flag, are [explained](http://oracledba.ru/fv11gr2/gv$transaction.html) in v$fixed_view_definition. Since v$transaction is empty without a transaction, you can directly query x$ktcxb to find sessions with certain attributes, e.g. serializable isolation level: select * from v$session where taddr in (select ktcxbxba from x$ktcxb where bitand(ktcxbflg,268435456)!=0). Other bits of ktcxbflg not shown in v$fixed_view_definition are: bit 1 read write and read committed, 4(?) read only, 13 using private strand ([Ref](http://www.hellodba.com/Doc/Oracle_redo_strand_cn.html)), and there's [one](http://www.orafaq.com/usenet/comp.databases.oracle.server/2004/06/02/0151.htm) for distributed transaction. Experiment to find more. Inside Oracle, symbolic names such as KTCXBALC, KTCXBTRN, KTCXBINV, KTCXBCMT, KTCXBROL represent them.]',
q'[ Free extent bitmap in file header for LMT (equivalent to fet$ in DMT). Check dba_free_space view definition ([Ref](http://www.freelists.org/post/oracle-l/What-is-sysxktfbhcktfbhcsz-and-sysxktfbfektfbfeblks,1)).]',
q'[ Summarizes free space with one row per datafile. Check dba_data_files or dba_temp_files view definition]',
q'[ In 12*c*. Base table of undocumented v$bts_stat. Stats populated for bigfile tablespaces.]',
q'[ Used extent bitmap in file header for LMT (equivalent to uet$ in DMT)]',
q'[ Related to in-memory undo flushing. X$ktifp shows IMU pools and x$ktiff shows the events (functions) that trigger IMU flushing and the counts. ([Ref](https://oracleadmins.wordpress.com/2008/08/30/a-new-learning-imu-private-redo-strand/))]',
q'[ Retains history for some time after a parallel transaction rollback. Columns usn, slt and seq are what were in v$transaction. Columns stime and etime can be converted ([Note 1](#time)). See also the documented views v$fast_start_transactions, v$fast_start_servers.]',
q'[ Base table of v$resumable, gv$_resumable2 (which has objid i.e. tablespace$.ts#, and type). The only unexposed columns are kssobflg and kssobown (which is v$session.saddr).]',
q'[ In 12*c*R2. In-memory pools. Since the sizes (length column) are larger than alloc_bytes of v$inmemory_area (or x$ktsimau), maybe an IM area is an allocated part of IM pool. Pool != area.]',
q'[ New in 12.1.0.2. Related to space pre-allocation (controlled by _enable_space_preallocation). Event 60051.]',
q'[ Stats for alter table shrink space. Begin and end times are seconds from epoch ([Note 1](#time)).]',
q'[ Probably records transactions on LOB columns. FSB is LOB Free Space Block, HBB Hash Bucket Block, etc.]',
q'[ Records some ASSM tablespace space management stats. Column ktspstatfsf "records how many times L1-BMBs are selected then rejected because they are owned by a different instance" ([Bug 407495](https://support.oracle.com/epmos/faces/ui/km/BugDisplay.jspx?id=4074953%20))]',
q'[ Base table of v$sort_usage (or v$tempseg_usage). From 11.2.0.2, ktssosqlid provides SQL ID for the SQL associated with this temp segment usage, not exposed in the v$ views until 12.1.0.2. See [Bug 17834663](https://support.oracle.com/epmos/faces/ui/km/BugDisplay.jspx?id=17834663) and [description](https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=17834663.8).]',
q'[  ]',
q'[ Used on Exadata only. [Ref](https://books.google.com/books?id=Mll4CgAAQBAJ&pg=PA392&lpg=PA392&dq=x$ktumascn).]',
q'[ Base table of flashback_transaction_query.]',
q'[ Base table of v$fast_start_transactions. The unexposed dtime column stores the transaction recovery time as seconds since epoch ([Note 1](#time)).]',
q'[ Base table of v$undostat. Unexposed column ktusmstrqsid may be recursive SQL ID. It's not always equal to ktusmstrmqi (maxqueryid or "the longest running SQL statement in the period".]',
q'[ "get the SCN of the most recently committed (local) transaction" with select max(ktuxescnw * power(2, 32) + ktuxescnb) from x$ktuxe ([Ref](http://www.ixora.com.au/q+a/0009/20125947.htm)); select * from transaction dead waiting for cleanup" ([1561125](https://support.oracle.com/CSP/main/article?cmd=show&type=BUG&id=1561125))]',
q'[ (parameters) Various database and instance parameters related to buffer cache working mechanisms, CPUs, etc. In pre-10*g*, there's also x$kvis for sizes of internal structures.]',
q'[ Streams memory percentage used (frused_kwqbpmt), _buffered_publisher_flow_control_threshold (flbp_kwqbpmt, default 5000), _capture_publisher_flow_control_threshold (flcp_kwqbpmt, default 15000).]',
q'[ metrics, resilvering Some are 12*c*R2 only. Exadata only. See `oradebug doc component` ([Ref](http://tech.e2sn.com/oracle/troubleshooting/oradebug-doc)).]',
q'[ 12*c*. Base table of undocumented v$px_process_trace.]',
q'[ Settings related to parallel processes, e.g. whether to use large pool (true if using ASMM, parallel_automatic_tuning is true, or _PX_use_large_pool is true), _parallel_min_message_pool, etc.]',
q'[ message stats, (query) stats Coordinator stats. See below for slave stats.]',
q'[ Trace file after setting _px_trace has the same info, and is more complete. See notes [444164.1](https://support.oracle.com/epmos/faces/DocumentDisplay?id=444164.1), [1508338.1](https://support.oracle.com/epmos/faces/DocumentDisplay?id=1508338.1), [1630039.1](https://support.oracle.com/epmos/faces/DocumentDisplay?id=1630039.1).]',
q'[ stats, (query) stats Current list of reasons for parallel execution slave and stats. For dequeuing, see wait event "parallel query dequeue wait" in [Anjo Kolk's paper](http://www.akadia.com/download/documents/session_wait_events.pdf).]',
q'[ Base table of v$sql_bind_data. Column kxsbdof2 (or shared_flag2 of v$sql_bind_data) is oacfl2 (not oacflg2 as in [Note:39817.1](https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=39817.1)) in SQL trace. "System-generated binds have a value of 256 in the SHARED_FLAG2 column". According to [Bug 4359367](https://support.oracle.com/CSP/main/article?cmd=show&type=BUG&id=4359367), when it's 0x300, the bind variable is marked as unsafe (affecting cursor_sharing=similar). [Note:296377.1](https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=296377.1) has more on its value.]',
q'[ stats, table stats 12*c*. Gather stats for a global temporary table and you'll see stats in here (not in dba_tables, dba_indexes etc).]',
q'[ Related to work load management (WLM), event 10739, dbms_wlm package, undocumented v$calltag, v$wlm*.]',
q'[ Session-specific. X$kzspr is the base table for v$enabledprivilege, which is base table of session_privs. X$kzsro is the base table of session_roles, and is used by many SQL scripts in ?/rdbms/admin.]',
q'[ Base table of v$gc_element. See the definition of gv$bh for its relationship with x$bh.]',
q'[ populated later)? Ktslbegtime may be seconds from epoch ([Note 1](#time)). X$lobstat is more persistent and is the base table of undocumented v$lobstat (space allocation/deallocation columns not exposed). Lobcurrenttime is seconds since epoch ([Note 1](#time)). KTSJ Slave process W000 may query v$lobstat in doing space management. For basic LOB stats, v$sesstat and v$sysstat have 'lob reads', 'lob writes' etc., and v$segstat has segment-specific stats.]',
q'[ histogram [951152.1](https://support.oracle.com/epmos/faces/ui/km/DocContentDisplay.jspx?id=951152.1)]',
q'[ May be the place where background processes (dest) store and fetch messages about what they do. Related to _messages parameter (should be much higher than row count of this table; 2*processes by default), messages latch, and "rdbms ipc (message|reply)" wait events.]',
q'[ Not sure why necessary. The lengths stored in here are used to truncate long module and action strings in views such as dba_hist_sqlstat, sqltune related views, etc (find all by `select view_name, text from user_views where lower(text_vc) like '%x$modact_length%'` as sys in 12*c*).]',
q'[ Base table of v$sql_workarea_active, but columns sqlsig, siblings (for parallel slaves), cap_size (mem size limit), min_mem, onepass_mem, optimal_mem, ds_flags, isize (for input?), osize (output?), ktssosize are not exposed. Note that [223730.1](https://support.oracle.com/epmos/faces/DocumentDisplay?id=223730.1) says "Small active sorts (under 64 KB) are excluded from the view" v$sql_workarea_active, which is built on x$qesmmiwt without a where-clause.]',
q'[ Base table of v$pgastat, which does not show invisible stats (where qesmmsgavs=0).]',
q'[ Objn_qksfgi points to objects whose changes may invalidate the SQL (sqlid_qksfgi).]',
q'[ Base tables of v$session_fix_control and v$system_fix_control. Unexposed columns are bits_qksbgs[ey]row (number of bits used), flag_qksbgs[ey]row, id_qksbgs[ey]row.]',
q'[ Base tables for v$ses_optimizer_env and v$sys_optimizer_env, respectively. There're so many optimizer parameters the two documented views are missing that sometimes you need to query these base tables directly. For unexposed session CBO params, select pname_qksceserow from x$qksceses minus select name from v$ses_optimizer_env. For sys params, select pname_qkscesyrow from x$qkscesys minus select name from v$sys_optimizer_env.]',
q'[ 12*c*R2. For shadow lost write protection. [2159248.1](https://support.oracle.com/CSP/main/article?cmd=show&type=NOT&id=2159248.1).]',
q'[ RAC only. Show network connections on the interconnect. If you find significant 'gc blocks lost' in gv$sysstat, check the highest retrans of based on remote IP's and PID's (rem_ip* and rem_pid). Or check the highest lost_msgs in x$skgxp_port.]',
q'[ [Ref](http://www.ixora.com.au/notes/rba.htm)]',
q'[ KST tracing ([Ref](http://nocoug.org/download/2006-02/Advanced_Research_Techniques.pdf)). From 11*g*, time is microseconds since 2000-01-01 (assumes CDT local timezone here): select new_time(to_date(to_char(time/86400000000+to_date('20000101','yyyymmdd'),'yyyymmdd hh24:mi:ss'),'yyyymmdd hh24:mi:ss'), 'GMT', 'CDT') from x$trace. Below 11*g*, op column indicates various operations, such as 7 for wait, 11 for latch post ([896098](https://support.oracle.com/epmos/faces/ui/km/BugDisplay.jspx?id=896098)). 10*g* RAC bdump/cdmp_*time* directory has [trw](../oranotes/KstTraceCdmpTrwFiles.txt) files that contain the same info (the trace file has columns TimeInMicroSec:?, OraclePid, SID, event, OpCode, TraceData). In 11*g* and up, the files are named *_bucket.trc.]',
q'[ Base table of v$dblink. Since it's about UGA, each session has different content. After you end your distributed transactions (distributed queries included) and close database links, v$dblink no longer shows the entries. But x$uganco still has them, which unfortunately are not visible from another session.]',
q'[ option [Ref](http://tech.e2sn.com/oracle/sql/oracle-execution-plan-operation-reference)]',
q'[ Probably "lightweight user sessions", or Fusion Security sessions. May be created by a specially constructed OCI or Java program. Also said to be proxy sessions, but apparently not sessions created by proxy logon.]'
		)
	)
)
